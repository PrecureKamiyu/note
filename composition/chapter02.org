* chapter 2 ISA and risc-v instruction
** ISA 是什么? 

risc-v 是一种指令集架构: ISA (instruction set architecture). 也称为处理器架构

使用同一个指令集架构的计算机就是这种 ISA 的系列机, 比如说 risc-v 系列机, Arm 系列机.  


一个 ISA 有很多参数, 最基本的参数就是通用寄存器的位宽, 一般有32bit和64
bit之分. 位宽, 指定了通用寄存器的宽度. 其决定了决定了寻址范围的大小, 数
据运算能力的强弱. 地址长度为寄存器的长度, 64 bit 的地址范围当然是比 32
bit 的要长的多. 

其需要和指令编码长度分开, 指令的编码长度是越小越好的
*** 原则

1. 简单性来自于规则性
2. 越小越快
3. 加速经常性时间.  经常使用的指令尽量短. 
4. 需要良好的折衷.

*** 性能要求

    完备性: 指令丰富, 功能齐全, 使用方便
    高效性: 空间小, 速度快
    规整性: riscv 比较规整, 但是 x86 相反. 
    兼容性: 能够向上兼容

** content

   - 储存器寻址
   - 操作数的类型
   - 控制转移类指令
   - 指令格式

*** 存储器寻址

大端法和小端法
字地址, 字长度为 32 位 (riscv), 字地址为 addr.
小端法: 将字的低位放在 addr. 次低位放在 addr + 1.
大端法: 将字的高位放在 addr. 

**** 寄存器寻址

直接使用寄存器的名字

比如说 x1 就是访问了 x1 寄存器之中的值. 将其用来寻址的话, 就是访问内存
中 x1 为地址的值. 

**** 立即数寻址

真有这东西? 

*** 对齐问题 [0/1]
- [ ] 补充该部分
*** c 程序编译为可执行文件的过程

- 编译器 将 .c 文件编译为 .s 文件, 即, 汇编文件
- 汇编器 将 .s 文件编译为 .o 文件. 
- 链接器 将 library 之中内容连接到 .o 文件里面
- 加载器 将程序加载到???里面

*** 汇编语言的优缺点 

废话吧这是

** risc-v ISA

*** 指令格式
汇编指令的格式为 
    
   op dst, src1, src2

这是最一般的指令格式, 其中有 dst(destination), 两个来源 src. 一个指令
对应一个操作. 一行最多一条指令. C语言之中的操作会被分解为一条或者是多
条指令. 来源可以是 imm 也可以是寄存器的值. 

*** 寄存器

32个通用寄存器, x0--x31. 注意这里仅仅涉及 RV32I 或者是 RV64I 的寄存器,
这两个是 risc-v 指令的子集, 其他子集会用到其他的寄存器. 这算 dark side

算术逻辑运算所操作的数据必须直接来自于寄存器[fn:1]. 涉及内存的操作只有
load 指令和 save 指令. 其中 x0 是一个特殊的寄存器, 其值恒为 0. RV32I
指令集通用寄存器的长度为 32 位, 而RV64I指令集对应的长度是 64 位

汇编是相对原始的, 汇编语言之中没有变量的概念. 直接使用寄存器操作. 直接
使用寄存器能够最大化速度. 缺点在于寄存器的数量非常有限, 需要好好规划. 


|---------+--------+-----------------------------|
| 寄存器  | 符号   | 说明                        |
|---------+--------+-----------------------------|
| x0      | zero   | 值为0                       |
| x1      | ra     | return address              |
| x2      | sp     | stack pointer               |
| x3      | gp     | global pointer              |
| x4      | tp     | thread pointer              |
| x5-x7   | t0-t2  | temporary register          |
| x8      | s0/fp  | save register/frame pointer |
| x9      | s1     | save register               |
| x10-x11 | a0-a1  | return value                |
| x12-x17 | a2-a7  | function argument           |
| x18-x27 | s2-s11 | save register               |
| x28-x31 | t3-t6  | temporary register          |
|---------+--------+-----------------------------|

*** 内存

Save Load操作, 实现寄存器和内存之间的读写. 这里我们再次细明一下存储单
元和地址. 

一个地址单元是一个 Byte, 一个 Byte 是 8 个 bit. 我们常常用十六进制表示,那
么一个 Byte 可以使用两个字符表示. 比如说 0xFF. 一个 word 表示的是 32
个 bit, 也就是 4 个 Byte. 也有 double word (简写为 dword) 表示的是两个
word, 也就是 8 个 Byte. 还有 half word, 表示的是半个 word, 那就是16个
bit. 这些单位常常以后缀的方式出现在 save load 指令之中. 


** Instructions introduction
*** primitive instructions 

   - add 指令
   - sub 指令
   - subi 指令
   - imm 是什么
   - mul 指令
   - div 指令
   - or and 指令
   - sll sla
   - save load 指令
   - shamt
   - bne beq 指令
   - jalr jal 指令

*** pseudo instruction 
伪指令有简单理解的, 比如说 mv, sw, lw (sw, lw 本身不是伪指令, 但其有能
够作为伪指令). 也有比较难搞的, 比如说 la li 伪指令.

意思是将 \texttt{Label} 所在的指令的地址传输到 \texttt{rd} 上. 其中 \texttt{Label} 表示的是当前 PC 的值和目标指令的差值, 记为 \texttt{delta}, 长度为 32 位. 

** How to write a function using assembly [0/3]
- [ ] part 1
- [ ] part 2
- [ ] part 3
*** How to write a loop

我们需要分支跳转的指令来实现这点, 比如说, 我们要实现一个简单的语句: 

for (int i = 0 ; i < 2 ; i++) {
    ans = ans + i;
}                 

分析一下就是
    1. 写下一个 Label
    2. ans = ans + i;
    3. i++
    4. 分支跳转的判断

#+begin code
有: 
    add t0, x0, x0
    add t1, x0, x0
    li  t2, 2
Loop:
    add t1, t1, t0
    addi t0, t0, 1
    bne t0, t2, Loop
#+end

大概这样, t0 是 i; t1 是 ans; t2 是 2. 当然啦, bne 换为 bge 或许更好.
总是上面就是一个简单的 Loop. 

*** the concept of basic block

一段经常性执行的代码便是一个 basic block. 由于加速经常性时间的构想, 这
段代码实际上会被特地的优化, 使得其运行速度变得更快. 

*** Function and stack

我们有的时候要将数据存入 stack, 而 stack 是位于内存里面的. 我们在手动
进行汇编程序的编写的时候, 要初始化数据, 这个时候我们可以手动地为这些数
据分配空间, 放在 stack 里面. 我们接下来给出一个 bing 的例子:


factorial:
    addi sp, sp, -16  # Allocate space on stack
    sw ra, 12(sp)     # Save return address
    sw a0, 8(sp)      # Save argument n
    addi a1, x0, 1    # Initialize result to 1
    beq a0, x0, end   # If n == 0, jump to end
loop:
    mul a1, a1, a0    # result *= n
    addi a0, a0, -1   # n--
    bne a0, x0, loop  # If n != 0, jump to loop
end:
    mv a0, a1         # Return result in a0
    lw ra, 12(sp)     # Restore return address
    addi sp, sp, 16   # Deallocate space on stack
    ret               # Return from function

** The expression of an instruction

*** the field of an instruction code

一个 instruction code 是32位. 一般来说会划分出大约5到6个field, 这些
field有它们自己的功能. 对于不同类型的指令码, 这些field各有不同. 我们这
里用 add 指令为例子.

|-------+--------+------+------+--------+----+--------|
| field | funct7 | rst2 | rst1 | funct3 | rd | opcode |
|-------+--------+------+------+--------+----+--------|
| bits  |      7 |    5 |    5 |      3 |  5 |      7 |
|-------+--------+------+------+--------+----+--------|

这是 R-type 指令. 

*** the type of the instruction code

共有很多类型, 常见的有 R, I, J, S, SB, U 型指令. 


[fn:1] 在 x86 之中并非如此, 大部分指令都可以对内存之中的数据进行操作.
比如说我们有一个 add 指令. 写为 

    add x1, x1, Imm(x2)

(当然了, x1 并不是 x86 之中寄存器的名字)这是说, 我们找到 Imm + x2 为地
址的内存数据, 加上 x1 之后再加到 x1 上.



* imm
操作名后面加上了一个 i, 那么这个操作是立即数操作. 
其将第二个操作数当作是立即数. 
需要知道的是, 立即数会进行一个符号扩展, 扩展为一个补码表示的.
e.g. \texttt{addi x1, x1, 5}

随后, 更值得注意的是, 存在 \texttt{addi}, 但是不存在 \texttt{subi}. 
\texttt{f = g - 10}
实际上是 \texttt{addi x3, x4, -10}
%EndOfParagraph

* mul
mulh 取高位指令. 详情请看 ppt 
%EndOfParagraph

* div
详情请看 ppt. 
%EndOfParagraph

* or and and
值得注意的是, risc-v 之中并没有取非操作. 
但是我们可以使用前面的知识, 进行代替. 

* shift

值得注意的是, 没有算术左移对应的指令
在一定范围内, 也就是算术左移没有发生错误的时候, 算术左移和逻辑左移是等价的. 这一点看以前的记录. 

我们复习一下, 什么时候算术位移会发生错误. 我们有这样一个判断标准: 对于左移, 如果左移之后再右移, 不能回到原本的数字的话, 
那么这个左移就出错了. 于是说, 对于左移, 正数丢弃了 \(1\), 或者是负数丢弃了 \(0\), 就会出错.

* save load

我们可以将寄存器之中东西塞到内存之中. 我们通过内存地址进行内存的访问. 

需要注意的是, 其他指令的操作数均是寄存器之中的数, 仅有 \texttt{save load} 指令能够对内存进行操作. 
这是 risc-v 的特点之一. 你可以看出 x86 里面并不是这样的. 格式如下: 
\texttt{memop reg, offset(bAddrReg)}
解释见 ppt. \texttt{memop} 指的是内存相关的操作(也就是 \texttt{s} 或者 \texttt{l}), \texttt{reg} 指的是目标寄存器, 第二个操作数是 
\texttt{offset(bAddrReg)}, 一其中 \texttt{offset} 是一个偏移量; \texttt{bAddrReg} 是寄存器, 将寄存器里的值当作是地址. 整体的地址便是 \texttt{offset + bAddrReg}. \footnote{在 x86 里面, 内存地址的表示更为复杂, 详情请自己找}

为传输指令指定大小, 见图~\ref{tab:daxiao}
\begin{figure}
		\centering
		\begin{tabular}{|c|l|}
		\hline 
		\texttt{sw} &  取字   \\ \hline 
		\texttt{sd} &  取双字 \\ \hline 
		\texttt{sh} &  取半字 \\ \hline 
		\texttt{sb} &  取byte \\ \hline 
		\end{tabular}
		\caption{为命令指定大小}\label{tab:daxiao}
\end{figure}
%EndOfParagraph 

* sign extension

我们进行 \texttt{load} 命令的时候, 要指定大小, 比如说 \texttt{w}, \texttt{d}, \texttt{h}, \texttt{b}.
这就是说, 我们要将一个长度为 \(32/64/16/8\) 的数据, 送到 \(32\) 或者是 \(64\) 位的寄存器里面. 这个时候, 
计算机会对传输的数据进行 \textbf{符号扩展}. 也就是将这一小串数据, 看作是补码, 然后扩展为 \(32\) 或者\(64\)位的补码. 

比如说一个传入了一个字节 \texttt{0x80}, 写为二进制为 \texttt{10000000}. 也就是有符号位 \(1\), 是一个负数, 于是扩展为 \(32\) 位的补码的时候就变为 \texttt{0xFF80}.

值得注意的是, 默认读数据的时候, 写入的时候, 会将数据扩展, 看作是有符号的
若是需要写入无符号数的话, 需要加上 \texttt{u}. 

e.g. 传输数据的举例. 见 ppt 实际上不是很难. 

\paragraph{涉及掩码的数据传输}

* add 
add 指令的表示为 
add rd, rst1, rst2

rd is register of destination

The command tell computer to do the computation---\texttt{rd = rst1 + rst2}. Note that rst1 rst2 are treated as signed number. 


Additionally, \texttt{addi} tells computer to do \texttt{rd = rst1 + imm}, where \texttt{rst2} is replaced by an immediate number.

* sub
\centerline{\texttt{sub, rd, rst1, rst2}}
is the form of the instruction, telling that \texttt{rd = rst1 - rst2}. 

It is worth noting that there is no such thing as \texttt{subi}, cause \texttt{addi} can do the same thing.
\subsubsection{mul}
* div rem 
* xor 
Logical operations can do thing likes 掩码. To achieve this we can use \texttt{and} and \texttt{0xFFFFFFFF}. Let us assume that the length of register is 32. A number \texttt{and} \texttt{0xFFFFFFFF} is the number itself. But when it \texttt{and} \texttt{0x0FFFFFFF}, the number loose it first four bits.

* shift 
\centerline{\texttt{s + l/r + a/l + [i]}}
is the decompostion of an instruction,
where \texttt{s} for shift, \texttt{l,r} for \textbf{left} or \textbf{right}, \texttt{a,l} for \textbf{arithmetic} or \textbf{logical}. \texttt{[i]} is optional, which stands for \texttt{imm}.

About the arithmetic shift, you check 01.pdf out.

* shamt 
Indeed, for a 64-bits data store in a register. It would be of no use to shift of 64-bits, which resulting that in \texttt{slai} or other shifting command ending with \texttt{i}, only the lowest 6-bits of immediate number are useful. Other bits are abandoned. The remaining part is called shamt. 

* shift left arithmetic

There is not such thing as \texttt{sla[i]}. We already know when the shift cause ailment. Exactly when the number is starting with \texttt{10} or \texttt{01} the result of \texttt{sla} is not what we want. 

However, you may check that when there is no ailment, \texttt{sla} works just like \texttt{sll}. So \texttt{sla} become less needed. 
\subsubsection{s, l}
\centerline{\texttt{s/l r, offset(AddR)}}
where \texttt{AddR} is a register. The command tells computer to load data from address \texttt{offset + AddR} to \texttt{r}, or to save the data in \texttt{r} to address \texttt{offset + AddR}.
\subsubsection{address and word and byte}
A \textbf{word} in risc-v has \textbf{32} bits. There arouses an interesting question: how to load 32-bit data to a 64-bit register? 

No, what I am saying is that you need to care for whether the data is unsigned type or not. You need to expand a number when it is treated as a negative number. 
\subsubsection{slt}
slt for set less than. \texttt{slt} is an instruction to compare the value of some data. 

\centerline{\texttt{slt rd, rst1, rst2}} 
means that \texttt{rd = rst1 and rst2}


* bne beq blt bltu
\begin{enumerate}
\item b for break
\item eq for equal.
\item ne for not equal. 
\item lt for less then.
\item ge for greater or equal.
\end{enumerate}
Use this set of command to jump which is used to achieve if-else structure. Note that for blt and bge, there exists unsigned type of commands. 

* jalr jal 
\centerline{jal rd, Label}
称为无条件跳转. PC+4 存贮在 rd 之中. 并且 PC 赋值为 \texttt{Label}. 

\texttt{Label} 是一个写在程序行首的标签, 比如说 \texttt{Exit} 或者 \texttt{Loop} 等. 程序运行的时候此标签会翻译为一个指令的地址. 

The actual operation it takes is PC = PC + \texttt{offSet}, where \texttt{offSet} is translated from \texttt{Label}. 

\centerline{jalr rd, offSet(AddR)}
是 \texttt{jalr} 的格式. 其表示, \texttt{rd} = PC + 4. 将 PC 的值赋为 \texttt{offset + AddR}. 

